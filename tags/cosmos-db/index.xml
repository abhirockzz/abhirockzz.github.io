<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Code, Data &amp; Cloud – Cosmos Db</title>
    <link>https://abhirockzz.github.io/tags/cosmos-db/</link>
    <description>Recent content in Cosmos Db on Code, Data &amp; Cloud</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>© Abhishek Gupta, 2025</copyright>
    <lastBuildDate>Wed, 07 Jul 2021 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="https://abhirockzz.github.io/tags/cosmos-db/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Getting started with Kafka Connector for Azure Cosmos DB using Docker</title>
      <link>https://abhirockzz.github.io/blog/cosmos-kafka-docker/</link>
      <pubDate>Wed, 07 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://abhirockzz.github.io/blog/cosmos-kafka-docker/</guid>
      <description>
        
        
        &lt;p&gt;Having a local development environment is quite handy when trying out a new service or technology. &lt;a href=&#34;https://docs.docker.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Docker&lt;/a&gt; has emerged as the de-facto choice in such cases. It is specially useful in scenarios where you’re trying to integrate multiple services and gives you the ability to to start fresh before each run.&lt;/p&gt;
&lt;p&gt;This blog post is a getting started guide for the Kafka Connector for Azure Cosmos DB. All the components (including Azure Cosmos DB) will run on your local machine, thanks to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The &lt;a href=&#34;https://docs.microsoft.com/azure/cosmos-db/linux-emulator?tabs=ssl-netstd21&amp;amp;WT.mc_id=data-30458-abhishgu&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Azure Cosmos DB Linux Emulator&lt;/a&gt; which can be used for local development and testing purposes without creating an Azure subscription or incurring any costs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And, &lt;a href=&#34;https://docs.docker.com/compose/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Docker Compose&lt;/a&gt; which is a tool for defining and running multi-container Docker applications. It will orchestrate all the components required by our setup including Azure Cosmos DB emulator, Kafka, Zookeeper, Kafka connectors etc.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/2000/0*-96bfzSAEyUoZQjE.jpg&#34; alt=&#34;End to end workflow&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;To make things easier, we will pick single-focused scenarios and go step by step:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Step 0 — A simple scenario to check if our setup if functional.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How to handle streaming JSON data&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How to handle streaming JSON data which is &lt;em&gt;not&lt;/em&gt; compatible with Azure Cosmos DB&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How to handle Avro data using Schema Registry&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
  &lt;p&gt;It is assumed that you’re comfortable with Kafka and have an understanding of Kafka Connect&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;First things first…&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;first-things-first&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#first-things-first&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;… here is a quick overview of the the Azure Cosmos DB Emulator and the Kafka Connector.&lt;/p&gt;
&lt;p&gt;The Azure Cosmos DB connector allows you to move data between Azure Cosmos DB and Kafka. It’s available as a source as well as a sink. The Azure Cosmos DB Sink connector writes data from a Kafka topic to an Azure Cosmos DB container and the Source connector writes changes from an Azure Cosmos DB container to a Kafka topic. At the time of writing, the connector is in pre-production mode. You can read more about it on the &lt;a href=&#34;https://github.com/microsoft/kafka-connect-cosmosdb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub repo&lt;/a&gt; or install/download it from the &lt;a href=&#34;https://www.confluent.io/hub/microsoftcorporation/kafka-connect-cosmos&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Confluent Hub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://docs.microsoft.com/azure/cosmos-db/linux-emulator?tabs=ssl-netstd21&amp;amp;WT.mc_id=data-30458-abhishgu&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Azure Cosmos DB Linux Emulator&lt;/a&gt; provides a local environment that emulates the Azure Cosmos DB service for development purposes (currently, it only supports SQL API). It provides a high-fidelity emulation of the Azure Cosmos DB service and supports functionality such as creating data, querying data, provisioning and scaling containers, and executing stored procedures and triggers.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;At the time of writing, the Azure Cosmos DB Linux Emulator is in preview.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can dive into how to use the emulator on &lt;a href=&#34;https://docs.microsoft.com/azure/cosmos-db/linux-emulator?tabs=ssl-netstd21&amp;amp;WT.mc_id=data-30458-abhishgu#run-on-macos&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;macOS&lt;/a&gt; or &lt;a href=&#34;https://docs.microsoft.com/azure/cosmos-db/linux-emulator?tabs=ssl-netstd21&amp;amp;WT.mc_id=data-30458-abhishgu#run-on-linux&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Linux&lt;/a&gt;, &lt;a href=&#34;https://docs.microsoft.com/azure/cosmos-db/linux-emulator?tabs=ssl-netstd21&amp;amp;WT.mc_id=data-30458-abhishgu#differences-between-the-linux-emulator-and-the-cloud-service&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;how is it different&lt;/a&gt; from the Azure Cosmos DB cloud service, &lt;a href=&#34;https://docs.microsoft.com/azure/cosmos-db/linux-emulator?tabs=ssl-netstd21&amp;amp;WT.mc_id=data-30458-abhishgu#troubleshoot-issues&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;troubleshoot issues&lt;/a&gt;, etc.&lt;/p&gt;
&lt;h2&gt;Before you start…&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;before-you-start&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#before-you-start&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Make sure you have &lt;a href=&#34;https://docs.docker.com/engine/install/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Docker&lt;/a&gt; and &lt;a href=&#34;https://docs.docker.com/compose/install/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;docker-compose&lt;/a&gt; installed.&lt;/p&gt;
&lt;p&gt;Also, clone the project from GitHub:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone [https://github.com/Azure-Samples/cosmosdb-kafka-connect-docker](https://github.com/Azure-Samples/cosmosdb-kafka-connect-docker)
cd cosmosdb-kafka-connect-docker
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Start all the services&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;start-all-the-services&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#start-all-the-services&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;All the components are defined in the &lt;a href=&#34;https://github.com/Azure-Samples/cosmosdb-kafka-connect-docker&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;docker-compose&lt;/a&gt; file:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Azure Cosmos DB emulator&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kafka and Zookeeper&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Azure Cosmos DB and Datagen connectors (run as separate Kafka Connect workers)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Confluent Schema Registry&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks to Docker Compose, the environment can be brought up with a single command. When you run this for this the first time, it may take a while for the containers to be downloaded (subsequent executions are faster). Optionally, you can also download the images separately before starting Docker Compose:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(optional)
docker pull confluentinc/cp-zookeeper:latest
docker pull confluentinc/cp-kafka:latest
docker pull confluentinc/cp-schema-registry:latest
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To start all the services:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker-compose -p cosmosdb-kafka-docker up --build
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After a couple of minutes, check the containers:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker-compose -p cosmosdb-kafka-docker ps
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once all the services as up and running, the next logical step is to install the connector, right? Well, there a couple of things we need to take care of. For Java apps to connect to the Azure Cosmos DB emulator, you need to have &lt;a href=&#34;https://docs.microsoft.com/azure/cosmos-db/local-emulator-export-ssl-certificates?WT.mc_id=data-30458-abhishgu#use-the-certificate-with-java-apps&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;certificates installed in the Java certificate store&lt;/a&gt;. In this case, we will seed the certificate from the Azure Cosmos DB emulator container to the Cosmos DB Kafka Connect container.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Although this process can be automated, I am doing it manually to make things clear.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Configure Azure Cosmos DB Emulator Certificates&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;configure-azure-cosmos-db-emulator-certificates&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#configure-azure-cosmos-db-emulator-certificates&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Execute this command to store the certificate in the Java certificate store (using docker exec):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker exec --user root -it cosmosdb-kafka-docker_cosmosdb-connector_1 /bin/bash

# execute the below command inside the container
curl -k https://cosmosdb:8081/_explorer/emulator.pem &amp;gt; ~/emulatorcert.crt &amp;amp;&amp;amp; keytool -noprompt -storepass changeit -keypass changeit -keystore /usr/lib/jvm/zulu11-ca/lib/security/cacerts -importcert -alias emulator_cert -file ~/emulatorcert.crt
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
  &lt;p&gt;You should see this output — Certificate was added to keystore&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And, one last thing before we proceed…&lt;/p&gt;
&lt;h2&gt;Create Azure Cosmos DB database and containers&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;create-azure-cosmos-db-database-and-containers&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#create-azure-cosmos-db-database-and-containers&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Access the Azure Cosmos DB emulator portal at &lt;a href=&#34;https://localhost:8081/_explorer/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://localhost:8081/_explorer/index.html&lt;/a&gt; and create the below resources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Database named testdb&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Containers — inventory, orders, orders_avro (ensure that the partition key for all the containers is /id)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/5000/0*PO4C3Q3TnzuKA7wI.png&#34; alt=&#34;Azure Comos DB local emulator&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h2&gt;Let’s explore all the scenarios&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;lets-explore-all-the-scenarios&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#lets-explore-all-the-scenarios&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;To start off let’s look at the basic scenario. Before trying out other things, we want to make sure everything is functional.&lt;/p&gt;
&lt;h3&gt;1. Hello world!&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;1-hello-world&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#1-hello-world&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Start the inventory data connector for Cosmos DB:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl -X POST -H &amp;quot;Content-Type: application/json&amp;quot; -d @cosmosdb-inventory-connector_1.json http://localhost:8083/connectors

# to check the connector status
curl http://localhost:8083/connectors/inventory-sink/status
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To test the end to end flow, send a few records to the inventory_topic topic in Kafka:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker exec -it kafka bash -c &#39;cd /usr/bin &amp;amp;&amp;amp; kafka-console-producer --topic inventory_topic --bootstrap-server kafka:29092&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once the prompt is ready, send the JSON records one by one:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{&amp;quot;id&amp;quot;: &amp;quot;5000&amp;quot;,&amp;quot;quantity&amp;quot;: 100,&amp;quot;productid&amp;quot;: 42}
{&amp;quot;id&amp;quot;: &amp;quot;5001&amp;quot;,&amp;quot;quantity&amp;quot;: 99,&amp;quot;productid&amp;quot;: 43}
{&amp;quot;id&amp;quot;: &amp;quot;5002&amp;quot;,&amp;quot;quantity&amp;quot;: 98,&amp;quot;productid&amp;quot;: 44}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Check Cosmos DB container to confirm if records have been saved. Navigate to the the portal &lt;a href=&#34;https://localhost:8081/_explorer/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://localhost:8081/_explorer/index.html&lt;/a&gt; and check the inventory container:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/5200/0*AYOfTcVlODgYrtN7.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Ok, it worked! Let’s go ahead and do something slightly more useful. Before moving on, delete the inventory connector.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl -X DELETE http://localhost:8083/connectors/inventory-sink/
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;2. Sync streaming data (JSON format) from Kafka to Azure Cosmos DB&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;2-sync-streaming-data-json-format-from-kafka-to-azure-cosmos-db&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#2-sync-streaming-data-json-format-from-kafka-to-azure-cosmos-db&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;For the remaining scenarios, we will use a producer component to generate records. The &lt;a href=&#34;https://github.com/confluentinc/kafka-connect-datagen&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kafka Connect Datagen connector&lt;/a&gt; is our friend. It is meant for generating mock data for testing, so let’s put it to good use!&lt;/p&gt;
&lt;p&gt;Start an instance of the Azure Cosmos DB connector:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl -X POST -H &amp;quot;Content-Type: application/json&amp;quot; -d @cosmosdb-inventory-connector_2.json http://localhost:8083/connectors

# to check the connector status
curl http://localhost:8083/connectors/inventory-sink/status
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once it’s ready, go ahead and start the Datagen connector which will generate mock inventory data in JSON format:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl -X POST -H &amp;quot;Content-Type: application/json&amp;quot; -d @datagen-inventory-connector.json http://localhost:8080/connectors

# to check the connector status
curl http://localhost:8080/connectors/datagen-inventory/status
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
  &lt;p&gt;Note that we use port 8080 for the Datagen connector since it’s running in a separate Kafka Connect container&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To look at the data produced by the Datagen connector, check the inventory_topic1 Kafka topic:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker exec -it kafka bash -c &#39;cd /usr/bin &amp;amp;&amp;amp; kafka-console-consumer --topic inventory_topic1 --bootstrap-server kafka:29092&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice the data (it maybe different in your case):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{&amp;quot;id&amp;quot;:5,&amp;quot;quantity&amp;quot;:5,&amp;quot;productid&amp;quot;:5}
{&amp;quot;id&amp;quot;:6,&amp;quot;quantity&amp;quot;:6,&amp;quot;productid&amp;quot;:6}
{&amp;quot;id&amp;quot;:7,&amp;quot;quantity&amp;quot;:7,&amp;quot;productid&amp;quot;:7}
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that id has a Integer value&lt;/p&gt;
&lt;p&gt;Check Azure Cosmos DB containers to confirm if records have been saved. Navigate to the the portal &lt;a href=&#34;https://localhost:8081/_explorer/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://localhost:8081/_explorer/index.html&lt;/a&gt; and check the inventory container:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/5000/0*5HJgI5rbBZ7D1upH.png&#34; alt=&#34;Data in inventory container&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The records in Cosmos DB have an id attribute of String data type. The original data in the Kafka topic had an id attribute of Integer type – but that would not have worked, since &lt;a href=&#34;https://docs.microsoft.com/rest/api/cosmos-db/documents?WT.mc_id=data-30458-abhishgu&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Azure Cosmos DB requires id to be a unique user-defined string&lt;/a&gt;. This conversion was made possible by a &lt;a href=&#34;https://docs.confluent.io/platform/current/connect/transforms/cast.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kafka Connect transform&lt;/a&gt; – Cast updates fields (or the entire key or value) to a specific type, updating the schema if one is present.&lt;/p&gt;
&lt;p&gt;Here is the part in the &lt;a href=&#34;https://github.com/Azure-Samples/cosmosdb-kafka-connect-docker/blob/master/cosmosdb-inventory-connector_2.json#L15&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;connector configuration&lt;/a&gt; which did the trick:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;transforms&amp;quot;: &amp;quot;Cast&amp;quot;,
&amp;quot;transforms.Cast.type&amp;quot;: &amp;quot;org.apache.kafka.connect.transforms.Cast$Value&amp;quot;,
&amp;quot;transforms.Cast.spec&amp;quot;: &amp;quot;id:string&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Before moving on, delete the Cosmos DB and Datagen inventory connectors.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl -X DELETE http://localhost:8080/connectors/datagen-inventory
curl -X DELETE http://localhost:8083/connectors/inventory-sink/
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;3. Push streaming Orders data (JSON format) from Kafka to Azure Cosmos DB&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;3-push-streaming-orders-data-json-format-from-kafka-to-azure-cosmos-db&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#3-push-streaming-orders-data-json-format-from-kafka-to-azure-cosmos-db&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Now, let’s switch gears and use the same data (JSON formatted) data, but with a slight twist. We will use a variant of the Datagen connector to generate mock orders data and adjust the Cosmos DB connector as well.&lt;/p&gt;
&lt;p&gt;To install a different instance of the Azure Cosmos DB connector:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl -X POST -H &amp;quot;Content-Type: application/json&amp;quot; -d @cosmosdb-orders-connector_1.json http://localhost:8083/connectors

# to check the connector status
curl http://localhost:8083/connectors/orders-sink/status
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Install the Datagen orders connector:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl -X POST -H &amp;quot;Content-Type: application/json&amp;quot; -d @datagen-orders-connector.json http://localhost:8080/connectors

# to check the connector status
curl http://localhost:8080/connectors/datagen-orders/status
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To look at the data produced by the Datagen connector, check the orders Kafka topic:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker exec -it kafka bash -c &#39;cd /usr/bin &amp;amp;&amp;amp; kafka-console-consumer --topic orders_topic --bootstrap-server kafka:29092&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice the data (it maybe different in your case):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{&amp;quot;ordertime&amp;quot;:1496251410176,&amp;quot;orderid&amp;quot;:3,&amp;quot;itemid&amp;quot;:&amp;quot;Item_869&amp;quot;,&amp;quot;orderunits&amp;quot;:3.2897805449886226,&amp;quot;address&amp;quot;:{&amp;quot;city&amp;quot;:&amp;quot;City_99&amp;quot;,&amp;quot;state&amp;quot;:&amp;quot;State_46&amp;quot;,&amp;quot;zipcode&amp;quot;:50570}}

{&amp;quot;ordertime&amp;quot;:1500129505219,&amp;quot;orderid&amp;quot;:4,&amp;quot;itemid&amp;quot;:&amp;quot;Item_339&amp;quot;,&amp;quot;orderunits&amp;quot;:3.6719921257659918,&amp;quot;address&amp;quot;:{&amp;quot;city&amp;quot;:&amp;quot;City_84&amp;quot;,&amp;quot;state&amp;quot;:&amp;quot;State_55&amp;quot;,&amp;quot;zipcode&amp;quot;:88573}}

{&amp;quot;ordertime&amp;quot;:1498873571020,&amp;quot;orderid&amp;quot;:5,&amp;quot;itemid&amp;quot;:&amp;quot;Item_922&amp;quot;,&amp;quot;orderunits&amp;quot;:8.4506812669258,&amp;quot;address&amp;quot;:{&amp;quot;city&amp;quot;:&amp;quot;City_48&amp;quot;,&amp;quot;state&amp;quot;:&amp;quot;State_66&amp;quot;,&amp;quot;zipcode&amp;quot;:55218}}

{&amp;quot;ordertime&amp;quot;:1513855504436,&amp;quot;orderid&amp;quot;:6,&amp;quot;itemid&amp;quot;:&amp;quot;Item_545&amp;quot;,&amp;quot;orderunits&amp;quot;:7.82561522361042,&amp;quot;address&amp;quot;:{&amp;quot;city&amp;quot;:&amp;quot;City_44&amp;quot;,&amp;quot;state&amp;quot;:&amp;quot;State_71&amp;quot;,&amp;quot;zipcode&amp;quot;:87868}}
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I chose Orders data on purpose since it is different compared to the Inventory data. Notice that JSON record produced by the Datagen connector has a orderid attribute (Integer data type), but no id attribute – but we know that Azure Cosmos DB won’t work without one.&lt;/p&gt;
&lt;p&gt;Check Cosmos DB containers to confirm if records have been saved. Navigate to the the portal &lt;a href=&#34;https://localhost:8081/_explorer/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://localhost:8081/_explorer/index.html&lt;/a&gt; and check the orders container:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/5200/0*eWjrMveMkRkgUf-P.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Notice that there is no orderid attribute in the records stored in Azure Cosmos DB. In fact, it has been replaced by the id attribute (with a String value). This achieved by the &lt;a href=&#34;https://docs.confluent.io/platform/current/connect/transforms/replacefield.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ReplaceField transformer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here is the part in the &lt;a href=&#34;https://github.com/Azure-Samples/cosmosdb-kafka-connect-docker/blob/master/cosmosdb-orders-connector_1.json#L16&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;connector configuration&lt;/a&gt; which made this possible:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;transforms&amp;quot;: &amp;quot;RenameField,Cast&amp;quot;,
&amp;quot;transforms.RenameField.type&amp;quot;: &amp;quot;org.apache.kafka.connect.transforms.ReplaceField$Value&amp;quot;,
&amp;quot;transforms.RenameField.renames&amp;quot;: &amp;quot;orderid:id&amp;quot;,
&amp;quot;transforms.Cast.type&amp;quot;: &amp;quot;org.apache.kafka.connect.transforms.Cast$Value&amp;quot;,
&amp;quot;transforms.Cast.spec&amp;quot;: &amp;quot;id:string&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
  &lt;p&gt;Depending on your use case, removing/renaming a field altogether may not be an ideal solution. However, it’s good to know that there are options. Also, remember that the original data in Kafka topics is still there, untouched. Other downstream apps can still leverage it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Before moving on, delete the Cosmos DB and Datagen inventory connectors.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl -X DELETE http://localhost:8080/connectors/datagen-orders
curl -X DELETE http://localhost:8083/connectors/orders-sink/
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;4. Push streaming Orders data (AVRO format) from Kafka to Azure Cosmos DB&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;4-push-streaming-orders-data-avro-format-from-kafka-to-azure-cosmos-db&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#4-push-streaming-orders-data-avro-format-from-kafka-to-azure-cosmos-db&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;So far we dealt with JSON, a commonly used data format. But, &lt;a href=&#34;https://avro.apache.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Avro&lt;/a&gt; is heavily used in production due to its compact format which leads to better performance and cost savings. To make it easier to deal with Avro data schema, there is &lt;a href=&#34;https://docs.confluent.io/platform/current/schema-registry/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Confluent Schema Registry&lt;/a&gt; which provides a serving layer for your metadata along with a RESTful interface for storing and retrieving your Avro (as well as JSON and Protobuf schemas). We will use &lt;a href=&#34;https://hub.docker.com/r/confluentinc/cp-schema-registry&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;the Docker version&lt;/a&gt; for the purposes of this blog post.&lt;/p&gt;
&lt;p&gt;Install a new instance of the Azure Cosmos DB connector that can handle Avro data:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl -X POST -H &amp;quot;Content-Type: application/json&amp;quot; -d @cosmosdb-orders-connector_2.json http://localhost:8083/connectors

# to check the connector status
curl http://localhost:8083/connectors/orders-sink/status
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Install Datagen connector which will generate mock orders data in Avro format:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl -X POST -H &amp;quot;Content-Type: application/json&amp;quot; -d @datagen-orders-connector-avro.json http://localhost:8080/connectors

# to check the connector status
curl http://localhost:8080/connectors/datagen-orders/status
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To look at the Avro data produced by the Datagen connector, check the orders_avro_topic Kafka topic:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker exec -it kafka bash -c &#39;cd /usr/bin &amp;amp;&amp;amp; kafka-console-consumer --topic orders_avro_topic --bootstrap-server kafka:29092&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since the Avro data in binary format, it’s not human readable:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;�����VItem_185lqf�@City_61State_73��
����WItem_219[�C��@City_74State_77��
�����VItem_7167Ix�dF�?City_53State_53��
���֩WItem_126*���?@City_58State_21��
�����VItem_329X�2,@City_49State_79��
�����XItem_886��&amp;gt;�|�@City_88State_27��
��V Item_956�r#�!@City_45State_96��
�ѼҕW&amp;quot;Item_157E�)$���?City_96State_63��
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Check Cosmos DB containers to confirm if records have been saved. Navigate to the the portal &lt;a href=&#34;https://localhost:8081/_explorer/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://localhost:8081/_explorer/index.html&lt;/a&gt; and check the orders_avro container:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/5200/0*HS-lQc0YRPMQJNRR.png&#34; alt=&#34;Data in orders_ container&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Great, things work as expected! &lt;a href=&#34;https://github.com/Azure-Samples/cosmosdb-kafka-connect-docker/blob/master/cosmosdb-orders-connector_2.json&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The connector configuration&lt;/a&gt; was updated to handle this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;value.converter&amp;quot;: &amp;quot;io.confluent.connect.avro.AvroConverter&amp;quot;,
&amp;quot;value.converter.schemas.enable&amp;quot;: &amp;quot;true&amp;quot;,
&amp;quot;value.converter.schema.registry.url&amp;quot;: &amp;quot;http://schema-registry:8081&amp;quot;,
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The changes include choosing the AvroConverter, enabling schemas and pointing to Schema Registry (in our case running locally in Docker).&lt;/p&gt;
&lt;p&gt;That is all for the use cases covered in this blog post. We only covered the Sink connector, but feel free to explore and experiment further! For example, you could extend the current setup to include the Source connector and configure it to send records from Azure Cosmos DB containers to Kafka.&lt;/p&gt;
&lt;h2&gt;Clean up&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;clean-up&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#clean-up&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Once you have finished, you can delete the connectors:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl -X DELETE http://localhost:8080/connectors/datagen-orders/
curl -X DELETE http://localhost:8083/connectors/orders-sink/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To stop all the Docker components:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker-compose -p cosmosdb-kafka-docker down -v
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Conclusion&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;conclusion&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#conclusion&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Although we covered simple scenarios for demonstration purposes, it goes to show how you can leverage off-the shelf solutions (Connectors, Transformers, Schema Registry etc.) and focus on the heavy lifting that your Azure Cosmos DB based application or data-pipeline requires. Since this example adopts a Docker based approach for local development, it is cost-effective (well, free!) and can be easily customised to suit your requirements.&lt;/p&gt;
&lt;p&gt;For production scenarios, you would need to setup, configure and operate these connectors. Kafka Connect workers are simply JVM processes, thus inherently stateless (all the state handling is offloaded to Kafka). There is a lot of flexibility in terms of your overall architecture as well as orchestration — for instance, you could run them in Kubernetes for fault-tolerance and scalability.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
